#!/usr/bin/env ruby
lib      = File.expand_path('../../lib', __FILE__); $LOAD_PATH.unshift(lib)
require 'erb'
require 'awesome_print'
require 'examinator'

templates_dir = File.expand_path('../../templates', __FILE__)
features_dir  = File.expand_path('../../features', __FILE__)

courses = Examinator::Exam4.courses.map { |c| Examinator::Course.new name: c }

templates_pp = Dir[templates_dir + "/01_pp/*.erb"]
personas = %w[01_pp 02_cc]

personas.each do |persona|
  templates = Dir[templates_dir + "/#{persona}/*.erb"]

  courses.each do |c|
    target_dir = features_dir + "/#{persona}/" + c.slug

    Dir.mkdir(target_dir) unless Dir.exist?(target_dir)

    Dir.entries(target_dir)[2..-1].each do |f|
      File.delete(target_dir + '/' + f)
    end

    templates.each do |t|
      template = File.read(t)
      rendered = ERB.new(template).result(binding)

      target = target_dir + '/' + File.basename(t).gsub(/\.erb/,'')
      File.write(target, rendered)
    end
  end
end


# MODES.each do |mode|
#   TYPES.each do |type|
#     ap slug(mode, type)
#     target_dir = features_dir + '/' + slug(mode, type)
#     Dir.mkdir(target_dir) unless Dir.exist?(target_dir)

#     Dir.entries(target_dir)[2..-1].each do |f|
#       File.delete(target_dir + '/' + f)
#     end

#     templates.each do |template|
#       access           = ACCESS[mode]
#       feature_template = File.read(template)
#       renderer         = ERB.new(feature_template)
#       rendered         = renderer.result(binding)

#       target = target_dir + '/' + File.basename(template).gsub(/\.erb/,'')
#       File.write(target, rendered)
#     end
#   end
# end
